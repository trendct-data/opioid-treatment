gg <- ggplot(treat, aes(y=Admissions, x=FiscalYear))
gg <- gg + geom_bar(stat="identity")
gg <- gg + facet_wrap(~Town)
gg
str(treat)
gg <- ggplot(treat, aes(y=Admissions, x=FiscalYear))
gg <- gg + geom_bar(stat="identity")
gg <- gg + facet_wrap(~Town, ncol=5)
#gg <- gg + facet_wrap(~state, scale="free", ncol=5)
gg <- gg + scale_x_continuous(limits=c(2012,2016), breaks=c(2012,2016),
labels=c("2012", "2016"))
gg <- gg + labs(x=NULL, y=NULL,
title="Opioid Related Treatment Admissions by Town",
subtitle="",
caption="Department of Mental Health and Addiction Services")
gg <- gg + theme_minimal(base_family="Lato Regular")
gg <- gg + theme(panel.grid.major.y=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(plot.title=element_text(family="Lato Black"))
gg
treat$Admissions[is.na(treat$Admissions)] <- 0
library(scales)
library(rgdal)
require(maptools)
town_shape <- readOGR(dsn="maps", layer="ctgeo")
town_shape_df <- fortify(town_shape, region="NAME10")
View(town_shape_df)
names(treat)[names(treat) == 'Town'] <- 'id'
View(treat)
town_map <- left_join(town_shape_df, treat)
library(dplyr)
town_map <- left_join(town_shape_df, treat)
gg <- ggplot(voters_map, aes(long,lat, group=group, fill=Admissions)) +
geom_polygon() +
geom_path(color = "white") +
coord_equal()
gg <- gg + labs(x=NULL, y=NULL, title="Opioid Related Treatment Admissions by town",
subtitle="",
caption="SOURCE: Department of Mental Health and Addiction Services\nAndrew Ba Tran/TrendCT.org")
gg <- gg + theme_bw(base_family="Lato Regular")
gg <- gg + theme(text = element_text(size=16))
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(axis.text.y=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold", family="Lato Black", size=22))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=12, margin=margin(t=10, r=80), color="#7a7d7e"))
gg <- gg + theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
gg
gg <- ggplot(town_map, aes(long,lat, group=group, fill=Admissions)) +
geom_polygon() +
geom_path(color = "white") +
coord_equal()
gg <- gg + labs(x=NULL, y=NULL, title="Opioid Related Treatment Admissions by town",
subtitle="",
caption="SOURCE: Department of Mental Health and Addiction Services\nAndrew Ba Tran/TrendCT.org")
gg <- gg + theme_bw(base_family="Lato Regular")
gg <- gg + theme(text = element_text(size=16))
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(axis.text.y=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold", family="Lato Black", size=22))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=12, margin=margin(t=10, r=80), color="#7a7d7e"))
gg <- gg + theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
gg
gg <- ggplot(town_map, aes(long,lat, group=group, fill=Admissions)) +
geom_polygon() +
geom_path(color = "white") +
coord_equal() +
facet_wrap(~FiscalYear, ncol=3)
gg <- gg + labs(x=NULL, y=NULL, title="Opioid Related Treatment Admissions by town",
subtitle="",
caption="SOURCE: Department of Mental Health and Addiction Services\nAndrew Ba Tran/TrendCT.org")
gg <- gg + theme_bw(base_family="Lato Regular")
gg <- gg + theme(text = element_text(size=16))
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(axis.text.y=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold", family="Lato Black", size=22))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=12, margin=margin(t=10, r=80), color="#7a7d7e"))
gg <- gg + theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
gg
gg <- ggplot(town_map, aes(long,lat, group=group, fill=Admissions))
gg <- gg +  geom_polygon()
gg <- gg +  geom_path(color = "white")
gg <- gg +  coord_equal()
gg <- gg + facet_wrap(~FiscalYear, ncol=3)
gg <- gg + scale_fill_gradient(low="white", high="blue")
gg <- gg + labs(x=NULL, y=NULL, title="Opioid Related Treatment Admissions by town",
subtitle="",
caption="SOURCE: Department of Mental Health and Addiction Services\nAndrew Ba Tran/TrendCT.org")
gg <- gg + theme_bw(base_family="Lato Regular")
gg <- gg + theme(text = element_text(size=16))
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(axis.text.y=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold", family="Lato Black", size=22))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=12, margin=margin(t=10, r=80), color="#7a7d7e"))
gg <- gg + theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
gg
gg <- ggplot(town_map, aes(long,lat, group=group, fill=Admissions))
gg <- gg +  geom_polygon()
gg <- gg +  geom_path(color = "white")
gg <- gg +  coord_equal()
gg <- gg + facet_wrap(~FiscalYear, ncol=3)
gg <- gg + scale_fill_gradient(low="grey73", high="blue")
gg <- gg + labs(x=NULL, y=NULL, title="Opioid Related Treatment Admissions by town",
subtitle="",
caption="SOURCE: Department of Mental Health and Addiction Services\nAndrew Ba Tran/TrendCT.org")
gg <- gg + theme_bw(base_family="Lato Regular")
gg <- gg + theme(text = element_text(size=16))
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(axis.text.y=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold", family="Lato Black", size=22))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=12, margin=margin(t=10, r=80), color="#7a7d7e"))
gg <- gg + theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
gg
gg <- ggplot(town_map, aes(long,lat, group=group, fill=Admissions))
gg <- gg +  geom_polygon()
gg <- gg +  geom_path(color = "white")
gg <- gg +  coord_equal()
gg <- gg + facet_wrap(~FiscalYear, ncol=2)
gg <- gg + scale_fill_gradient(low="grey73", high="blue")
gg <- gg + labs(x=NULL, y=NULL, title="Opioid Related Treatment Admissions by town",
subtitle="",
caption="SOURCE: Department of Mental Health and Addiction Services\nAndrew Ba Tran/TrendCT.org")
gg <- gg + theme_bw(base_family="Lato Regular")
gg <- gg + theme(text = element_text(size=16))
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(axis.text.y=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold", family="Lato Black", size=22))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=12, margin=margin(t=10, r=80), color="#7a7d7e"))
gg <- gg + theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
gg
View(treat)
View(treat)
treat$Admissions[is.na(treat$Admissions)] <- 0
treat <- ctpopulator(Town, treat)
treat$per_capita_a <- round(treat$Admissions/treat$pop2013*1000, 2)
library(ctnamecleaner)
treat <- ctpopulator(Town, treat)
treat$per_capita_a <- round(treat$Admissions/treat$pop2013*1000, 2)
treat <- read.csv("https://data.ct.gov/api/views/4pv7-jhxb/rows.csv?accessType=DOWNLOAD", stringsAsFactors=F)
treat$Admissions[is.na(treat$Admissions)] <- 0
treat$Admissions[is.na(treat$Admissions)] <- 0
treat <- ctpopulator(Town, treat)
treat$per_capita_a <- round(treat$Admissions/treat$pop2013*1000, 2)
town_shape <- readOGR(dsn="maps", layer="ctgeo")
town_shape_df <- fortify(town_shape, region="NAME10")
names(treat)[names(treat) == 'Town'] <- 'id'
town_map <- left_join(town_shape_df, treat)
View(town_shape_df)
View(town_map)
View(treat)
View(treat)
View(town_map)
treat <- read.csv("https://data.ct.gov/api/views/4pv7-jhxb/rows.csv?accessType=DOWNLOAD", stringsAsFactors=F)
treat$Admissions[is.na(treat$Admissions)] <- 0
town_shape <- readOGR(dsn="maps", layer="ctgeo")
town_shape_df <- fortify(town_shape, region="NAME10")
names(treat)[names(treat) == 'Town'] <- 'id'
town_map <- left_join(town_shape_df, treat)
treat <- read.csv("https://data.ct.gov/api/views/4pv7-jhxb/rows.csv?accessType=DOWNLOAD", stringsAsFactors=F)
treat$Admissions[is.na(treat$Admissions)] <- 0
treat$Admissions[is.na(treat$Admissions)] <- 0
treat <- ctpopulator(Town, treat)
treat$per_capita_a <- round(treat$Admissions/treat$pop2013*1000, 2)
View(treat)
town_shape <- readOGR(dsn="maps", layer="ctgeo")
town_shape_df <- fortify(town_shape, region="NAME10")
names(treat)[names(treat) == 'Town'] <- 'id'
town_map <- left_join(town_shape_df, treat)
View(town_map)
gg <- ggplot(town_map, aes(long,lat, group=group, fill=per_capita_a))
gg <- gg +  geom_polygon()
gg <- gg +  geom_path(color = "white")
gg <- gg +  coord_equal()
gg <- gg + facet_wrap(~FiscalYear, ncol=2)
gg <- gg + scale_fill_gradient(low="grey73", high="blue")
gg <- gg + labs(x=NULL, y=NULL, title="Opioid Related Treatment Admissions by town per 1,000 residents",
subtitle="",
caption="SOURCE: Department of Mental Health and Addiction Services\nAndrew Ba Tran/TrendCT.org")
gg <- gg + theme_bw(base_family="Lato Regular")
gg <- gg + theme(text = element_text(size=16))
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(axis.text.y=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold", family="Lato Black", size=22))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=12, margin=margin(t=10, r=80), color="#7a7d7e"))
gg <- gg + theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
gg
str(town_map)
range(town_map$per_capita_a)
View(town_map)
View(treat)
library(stringr)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-per_capita_a)
library(tidyr)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-per_capita_a)
View(treat)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a)
View(treat)
View(tab1)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-2016)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`)
View(tab1)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`) %>%
kable(head())
library(knitr)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`) %>%
kable(head())
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`)
kable(head(tab1))
## If you don't have the following packages installed, uncomment and run the line below
#devtools::install_github("ropensci/plotly")
## install.packages("dplyr")
## install.packages("ggplot2")
library(dplyr)
library(ggplot2)
library(plotly)
## What determines if a town is Urban or Rural or Mixed?
## The U.S. Census Bureau defines urban and rural at the block level.
## Therefore, geographic entities, including cities, towns and census tracts,
## may be urban (located wholly within an urban area),
## rural (located entirely outside an urban area),
## or contain both urban and rural territory (only the densely settled portion of the city is within an urban area).
## https://ask.census.gov/faq.php?id=5000&faqId=6403
## Bringing in the Urban Area Relationship files for each county in Connecticut
## You can get your state's here ## https://ask.census.gov/faq.php?id=5000&faqId=6403
uace <- read.csv("data/uace1.csv", stringsAsFactors=FALSE)
uace2 <- read.csv("data/uace2.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace2)
uace3 <- read.csv("data/uace3.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace3)
uace4 <- read.csv("data/uace4.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace4)
uace5 <- read.csv("data/uace5.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace5)
uace6 <- read.csv("data/uace6.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace6)
uace7 <- read.csv("data/uace7.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace7)
uace8 <- read.csv("data/uace8.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace8)
nrow(uace) + nrow(uace2) + nrow(uace3)+ nrow(uace4)+ nrow(uace5)+ nrow(uace6)+ nrow(uace7)+ nrow(uace8)
## Bringing in a list of town (county subdivision) names from the Census
## In order to match town names to census blocks/tracts
towns_list <- read.csv("data/urban_suburban.csv")
towns_list <- towns_list[c("COUSUBFP10", "COUSUBNS10", "GEOID10", "NAME10")]
uace <- uace[c("COUSUBFP10", "UACE10")]
towns_list_uace <- left_join(uace, towns_list)
# Determining if a town is Urban or Rural or Mixed (Suburban)
town_count_uace <- towns_list_uace %>%
group_by(NAME10) %>%
summarise(Count=n())
town_count <- left_join(towns_list, town_count_uace)
town_count_uace2 <- towns_list_uace %>%
group_by(NAME10) %>%
summarise(Blank=sum(is.na(UACE10)))
town_count <- left_join(town_count, town_count_uace2)
town_count <- subset(town_count, NAME10!="County subdivisions not defined")
town_count$Type <- "blank"
town_count$perc_urban <- round((town_count$Count - town_count$Blank)/town_count$Count*100,2)
## Just to stop briefly to talk about what's going on
head(town_count)
## The Count column is the number of census tracts there are in a town
## The Blank column is the number of census tracts in the town that is Rural
## The perc_urban is the how much a municipality is urban
## The loop below fills in the Type column: Urban, Rural, Mixed?
for (i in 1:nrow(town_count)) {
# Set the threshold for what percent is enough
# for a town to be considered urban. Census says 100.
if (town_count$perc_urban[i]>=100) {
town_count$Type[i] <- "Urban"
} else if (town_count$Blank[i]==town_count$Count[i]) {
town_count$Type[i] <- "Rural"
} else {
town_count$Type[i] <- "Mixed"
}
}
uace <- read.csv("data/uace1.csv", stringsAsFactors=FALSE)
uace2 <- read.csv("data/uace2.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace2)
uace3 <- read.csv("data/uace3.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace3)
uace4 <- read.csv("data/uace4.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace4)
uace5 <- read.csv("data/uace5.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace5)
uace6 <- read.csv("data/uace6.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace6)
uace7 <- read.csv("data/uace7.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace7)
uace8 <- read.csv("data/uace8.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace8)
nrow(uace) + nrow(uace2) + nrow(uace3)+ nrow(uace4)+ nrow(uace5)+ nrow(uace6)+ nrow(uace7)+ nrow(uace8)
towns_list <- read.csv("data/urban_suburban.csv")
towns_list <- towns_list[c("COUSUBFP10", "COUSUBNS10", "GEOID10", "NAME10")]
uace <- uace[c("COUSUBFP10", "UACE10")]
View(uace)
View(uace)
View(uace2)
View(uace3)
View(uace4)
View(uace4)
library(dplyr)
library(ggplot2)
library(plotly)
## What determines if a town is Urban or Rural or Mixed?
## The U.S. Census Bureau defines urban and rural at the block level.
## Therefore, geographic entities, including cities, towns and census tracts,
## may be urban (located wholly within an urban area),
## rural (located entirely outside an urban area),
## or contain both urban and rural territory (only the densely settled portion of the city is within an urban area).
## https://ask.census.gov/faq.php?id=5000&faqId=6403
## Bringing in the Urban Area Relationship files for each county in Connecticut
## You can get your state's here ## https://ask.census.gov/faq.php?id=5000&faqId=6403
uace <- read.csv("data/uace1.csv", stringsAsFactors=FALSE)
uace2 <- read.csv("data/uace2.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace2)
uace3 <- read.csv("data/uace3.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace3)
uace4 <- read.csv("data/uace4.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace4)
uace5 <- read.csv("data/uace5.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace5)
uace6 <- read.csv("data/uace6.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace6)
uace7 <- read.csv("data/uace7.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace7)
uace8 <- read.csv("data/uace8.csv", stringsAsFactors=FALSE)
uace <- rbind(uace, uace8)
nrow(uace) + nrow(uace2) + nrow(uace3)+ nrow(uace4)+ nrow(uace5)+ nrow(uace6)+ nrow(uace7)+ nrow(uace8)
## Bringing in a list of town (county subdivision) names from the Census
## In order to match town names to census blocks/tracts
towns_list <- read.csv("data/urban_suburban.csv")
towns_list <- towns_list[c("COUSUBFP10", "COUSUBNS10", "GEOID10", "NAME10")]
uace <- uace[c("COUSUBFP10", "UACE10")]
towns_list_uace <- left_join(uace, towns_list)
# Determining if a town is Urban or Rural or Mixed (Suburban)
town_count_uace <- towns_list_uace %>%
group_by(NAME10) %>%
summarise(Count=n())
town_count <- left_join(towns_list, town_count_uace)
town_count_uace2 <- towns_list_uace %>%
group_by(NAME10) %>%
summarise(Blank=sum(is.na(UACE10)))
town_count <- left_join(town_count, town_count_uace2)
town_count <- subset(town_count, NAME10!="County subdivisions not defined")
town_count$Type <- "blank"
town_count$perc_urban <- round((town_count$Count - town_count$Blank)/town_count$Count*100,2)
## Just to stop briefly to talk about what's going on
head(town_count)
## The Count column is the number of census tracts there are in a town
## The Blank column is the number of census tracts in the town that is Rural
## The perc_urban is the how much a municipality is urban
## The loop below fills in the Type column: Urban, Rural, Mixed?
for (i in 1:nrow(town_count)) {
# Set the threshold for what percent is enough
# for a town to be considered urban. Census says 100.
if (town_count$perc_urban[i]>=100) {
town_count$Type[i] <- "Urban"
} else if (town_count$Blank[i]==town_count$Count[i]) {
town_count$Type[i] <- "Rural"
} else {
town_count$Type[i] <- "Mixed"
}
}
View(town_count)
View(town_count)
town_count <- town_count[c("NAME10", "Type", "perc_urban")]
View(town_count)
colnames(town_count) <- c("id", "town_type", "perc_urban")
tab1_joined <- left_join(tab1, town_count)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`)
kable(head(tab1, 10))
treat <- read.csv("https://data.ct.gov/api/views/4pv7-jhxb/rows.csv?accessType=DOWNLOAD", stringsAsFactors=F)
treat$Admissions[is.na(treat$Admissions)] <- 0
treat$Admissions[is.na(treat$Admissions)] <- 0
treat <- ctpopulator(Town, treat)
treat$per_capita_a <- round(treat$Admissions/treat$pop2013*1000, 2)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`)
kable(head(tab1, 10))
names(treat)[names(treat) == 'Town'] <- 'id'
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`)
kable(head(tab1, 10))
town_count <- town_count[c("NAME10", "Type", "perc_urban")]
colnames(town_count) <- c("id", "town_type", "perc_urban")
tab1_joined <- left_join(tab1, town_count)
source("urban_rural_mixed.R")
town_count <- town_count[c("NAME10", "Type", "perc_urban")]
colnames(town_count) <- c("id", "town_type", "perc_urban")
tab1_joined <- left_join(tab1, town_count)
View(tab1_joined)
treat$id <- str_to_title(treat$id)
tab1 <- treat %>%
select(id, FiscalYear, per_capita_a) %>%
spread(FiscalYear, per_capita_a) %>%
arrange(-`2016`)
kable(head(tab1, 10))
town_count <- town_count[c("NAME10", "Type", "perc_urban")]
colnames(town_count) <- c("id", "town_type", "perc_urban")
tab1_joined <- left_join(tab1, town_count)
View(town_count)
View(tab1)
View(treat)
tab2 <- treat %>%
select(id, FiscalYear, Admissions, pop2013) %>%
group_by(id) %>%
summarise(admissions_total=sum(Admissions))
View(tab2)
tab2 <- treat %>%
select(id, FiscalYear, Admissions, pop2013) %>%
group_by(id) %>%
summarise(admissions_total=sum(Admissions), pop=mean(pop2013))
View(tab2)
tab2 <- treat %>%
select(id, FiscalYear, Admissions, pop2013) %>%
group_by(id) %>%
summarise(admissions_total=sum(Admissions), pop=mean(pop2013)) %>%
mutate(per_capita=round(admissions_total/pop2013*1000,2))
tab2 <- treat %>%
select(id, FiscalYear, Admissions, pop2013) %>%
group_by(id) %>%
summarise(admissions_total=sum(Admissions), pop=mean(pop2013)) %>%
mutate(per_capita=round(admissions_total/pop*1000,2))
View(tab2)
tab1_joined <- left_join(tab2, town_count)
View(tab1_joined)
tab2_joined <- left_join(tab2, town_count)
tab2 <- treat %>%
select(id, FiscalYear, Admissions, pop2013, per_capita_a)
tab2_joined <- left_join(tab2, town_count)
p <- ggplot(tab2_joined, aes(x=town_type, y=Admissions,fill=FiscalYear))+
geom_boxplot()+
facet_grid(.~FiscalYear)+
labs(list(title="Overall opioid-related checkins in Connecticut", x="Year", y="Admissions"))+
theme(axis.text.x=element_text(angle=-90, vjust=0.4,hjust=1))
p
p <- ggplot(tab2_joined, aes(x=town_type, y=Admissions,fill=town_type))+
geom_boxplot()+
facet_grid(.~FiscalYear)+
labs(list(title="Overall opioid-related checkins in Connecticut", x="Year", y="Admissions"))+
theme(axis.text.x=element_text(angle=-90, vjust=0.4,hjust=1))
p
p <- ggplot(tab2_joined, aes(x=town_type, y=per_capita_a,fill=town_type))+
geom_boxplot()+
facet_grid(.~FiscalYear)+
labs(list(title="Overall opioid-related checkins in Connecticut", x="Year", y="Admissions per capita"))+
theme(axis.text.x=element_text(angle=-90, vjust=0.4,hjust=1))
p
